---
- name: Upgrade Ambari and ODP
  hosts: all
  become: yes
  vars:
    ambari_version: "2.7.8.0-1"
    odp_version: "3.2.3.0-2"
    ambari_repo_url: "https://mirror.odp.acceldata.dev/ODP/rhel/Ambari-2.7.8.0-1/"
    odp_repo_url: "https://mirror.odp.acceldata.dev/ODP/rhel/3.2.3.0-2/"
    backup_dir: "/etc/ambari-server/conf_backup"
    databases: ["ambari", "hive", "ranger", "rangerkms", "oozie"]
    openjdk_path: "/usr/lib/jvm/java-1.8.0-openjdk"
    java: "openjdk"
    kdc_admin_user: "admin/admin"
    kdc_admin_password: "Acceldata@01"

  pre_tasks:
    - name: Retrieve Ambari server node from inventory
      set_fact:
        ambari_server_node: "{{ groups['ambari_server'][0] }}"

    - name: Install jq
      yum:
        name: jq
        state: present

    - name: Verify Ambari version
      command: ambari-server --version
      register: verify_ambari_version_result
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
 
    - name: Display current Ambari version
      debug:
        msg: "Ambari version output: {{ verify_ambari_version_result.stdout_lines }}"
      when: inventory_hostname == ambari_server_node
    
    - name: Exit playbook if Ambari version is same, update ambari_version.
      fail:
        msg: "Ambari and ODP upgrade failed."
      when: verify_ambari_version_result.stdout_lines is defined 
            and verify_ambari_version_result.stdout_lines | length > 0 
            and verify_ambari_version_result.stdout_lines[0] == ambari_version
            and inventory_hostname == ambari_server_node
    
    - name: Stop Ambari server on the server node
      systemd:
        name: ambari-server
        state: stopped
      when: inventory_hostname == ambari_server_node

    - name: Stop Ambari agent on all nodes
      systemd:
        name: ambari-agent
        state: stopped

    - name: Create backup directory for Ambari configuration
      file:
        path: "{{ backup_dir }}"
        state: directory
      when: inventory_hostname == ambari_server_node

    - name: Backup Ambari server configuration
      copy:
        src: /etc/ambari-server/conf/
        dest: "{{ backup_dir }}"
        remote_src: yes
        mode: preserve
      when: inventory_hostname == ambari_server_node

    - name: Backup Ambari databases
      mysql_db:
        state: dump
        name: "{{ item }}"
        target: "{{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
      
    - name: Verify database backups
      stat:
        path: "{{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      register: backup_files
      when: inventory_hostname == ambari_server_node

    - name: Get Ambari cluster name
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters | jq -r '.items[0].Clusters.cluster_name'"
      register: cluster_name
      when: inventory_hostname == ambari_server_node

    - name: Set cluster name fact
      set_fact:
        cluster_name: "{{ cluster_name.stdout }}"
      when: inventory_hostname == ambari_server_node

    - name: Display cluster name
      debug:
        msg: "Cluster name: {{ cluster_name }}"
      when: inventory_hostname == ambari_server_node

    - name: Check if Kerberos is enabled
      command: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS"
      register: kerberos_status
      ignore_errors: true
      when: inventory_hostname == ambari_server_node

    - name: Set Kerberos credentials if Kerberos is enabled
      lineinfile:
        path: /etc/ambari-server/conf/ambari.properties
        line: |
          kdc.admin.credential={{ kdc_admin_user }}
          kdc.admin.password={{ kdc_admin_password }}
        create: yes
      when: kerberos_status.rc == 0 and inventory_hostname == ambari_server_node


    - name: Check if SPARK3 service is present
      command: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3"
      register: spark3_service
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
    
    - name: Get Spark3 mpack name
      shell: grep -w "spark3" /var/lib/ambari-server/resources/mpacks/*/mpack.json | egrep -v "common|addon" | cut -d '"' -f 4
      register: spark3_mpack
      changed_when: false
      check_mode: no
      ignore_errors: yes
      when: spark3_service.stdout | default("") | length > 0
    
    - name: Uninstall Spark3 mpack if present
      shell: ambari-server uninstall-mpack --mpack-name="{{ spark3_mpack.stdout }}"
      when: spark3_mpack.stdout | default("") | length > 0
      ignore_errors: yes
    
    - name: Stop SPARK3 service
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X PUT -d '{\"ServiceInfo\": {\"state\" : \"INSTALLED\"}}' http://{{ inventory_hostname }}:8080/api/v1/clusters/{{     cluster_name }}/services/SPARK3"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0
    
    - name: Delete SPARK3 service
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X DELETE http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0

  tasks:
    - name: Erase Ambari server and agent
      yum:
        name:
          - ambari-server
          - ambari-agent
        state: absent

    - name: Remove existing Ambari repo files
      file:
        path: /etc/yum.repos.d/ambari.repo
        state: absent

    - name: Clean all yum cache
      command: yum clean all

    - name: Add new Ambari repo file
      copy:
        dest: /etc/yum.repos.d/ambari.repo
        content: |
          [ambari]
          async = 1
          baseurl = {{ ambari_repo_url }}
          gpgcheck = 0
          name = ambari Version - Ambari-{{ ambari_version }}

    - name: Add ODP repo files
      copy:
        dest: /etc/yum.repos.d/odp.repo
        content: |
          [odp-main]
          name=ODP Main Repository
          baseurl={{ odp_repo_url }}
          gpgcheck=0
          enabled=1

    - name: Install Ambari server and agent on the server node
      yum:
        name:
          - ambari-server
          - ambari-agent
        state: present
      when: inventory_hostname == ambari_server_node

    - name: Install Ambari agent on all other nodes
      yum:
        name: ambari-agent
        state: present
      when: inventory_hostname != ambari_server_node

    - name: Restore Ambari configuration files
      copy:
        src: "{{ backup_dir }}/ambari.properties"
        dest: /etc/ambari-server/conf/ambari.properties
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Restore Ambari password.dat
      copy:
        src: "{{ backup_dir }}/password.dat"
        dest: /etc/ambari-server/conf/password.dat
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Upgrade Ambari server
      shell: /usr/sbin/ambari-server upgrade
      when: inventory_hostname == ambari_server_node
      notify: Wait for Ambari Server to start listening on port 8080

    - name: Restart ambari-server
      service:
        name: ambari-server
        state: restarted
      when: inventory_hostname == ambari_server_node
      notify: Wait for Ambari Server to start listening on port 8080

    - name: Wait for Ambari Server to start listening on port 8080
      wait_for:
        port: 8080
        host: 0.0.0.0
        delay: 1
      when: inventory_hostname == ambari_server_node

    - name: Set the Ambari Server in the agent configuration
      lineinfile:
        path: /etc/ambari-agent/conf/ambari-agent.ini
        regexp: "^hostname="
        line: "hostname={{ hostvars[groups['ambari_server_node']|first]['ansible_fqdn'] }}"
        state: present
      notify: Restart ambari-agent

    - name: Configure the Ambari Agents to use TLS 1.2
      ini_file:
        path: /etc/ambari-agent/conf/ambari-agent.ini
        create: no
        section: "security"
        option: "force"
        value: "true"

  handlers:
    - name: Wait for Ambari Server to start listening on port 8080
      wait_for:
        port: 8080
        host: 0.0.0.0
        delay: 10

    - name: Restart ambari-agent
      service:
        name: ambari-agent
        state: restarted
