---
- name: Upgrade Ambari and ODP
  hosts: all
  become: yes
  vars:
    ambari_version: "2.7.8.0-1"
    odp_version: "3.2.3.0-2"
    ambari_repo_url: "https://mirror.odp.acceldata.dev/ODP/rhel/Ambari-2.7.8.0-1/"
    odp_repo_url: "https://mirror.odp.acceldata.dev/ODP/rhel/3.2.3.0-2/"
    backup_dir: "/tmp/backup"
    databases: ["ambari", "hive", "ranger", "rangerkms", "oozie"]
    ambari_server_node: "localhost"
    openjdk_path: "/usr/lib/jvm/java-1.8.0-openjdk"
    java: "openjdk"

    database_options:
      ambari_db_name: 'ambari'
      ambari_db_username: 'ambari'
      ambari_db_password: 'bigdata'

  pre_tasks:
    - name: Check current Ambari version
      shell: ambari-server --version
      register: ambari_version_output
      changed_when: false
      when: inventory_hostname == ambari_server_node

    - name: Display current Ambari version
      debug:
        msg: "Current Ambari version is {{ ambari_version_output.stdout }}"
      when: inventory_hostname == ambari_server_node

    - name: Verify Ambari version
      fail:
        msg: "Ambari is already on version {{ ambari_version }}"
      when: ambari_version_output.stdout == ambari_version and inventory_hostname == ambari_server_node

    - name: End play if Ambari version is already the desired version
      meta: end_play
      when: ambari_version_output.stdout == ambari_version and inventory_hostname == ambari_server_node

    - name: Ensure passwordless SSH is set up
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Create backup directory for Ambari configuration
      file:
        path: "{{ backup_dir }}"
        state: directory

    - name: Backup Ambari server configuration
      copy:
        src: /etc/ambari-server/conf/
        dest: "{{ backup_dir }}"
        remote_src: yes
        mode: preserve

    - name: Create backup directory for Ambari configuration
      file:
        path: "{{ backup_dir }}"
        state: directory

    - name: Backup Ambari server configuration
      copy:
        src: /etc/ambari-server/conf/
        dest: "{{ backup_dir }}"
        remote_src: yes
        mode: preserve

    - name: Backup Ambari databases
      command: "mysqldump {{ item }} > {{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node

    - name: Verify database backups
      stat:
        path: "{{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      register: backup_files
      when: inventory_hostname == ambari_server_node

    - name: Fail if any database backup is missing
      fail:
        msg: "Database backup for {{ item.item }} failed!"
      when: item.stat.exists == false and inventory_hostname == ambari_server_node
      with_items: "{{ backup_files.results }}"

  tasks:
    - name: Stop Ambari server on the server node
      systemd:
        name: ambari-server
        state: stopped
      when: inventory_hostname == ambari_server_node

    - name: Stop Ambari agent on all nodes
      systemd:
        name: ambari-agent
        state: stopped

    - name: Erase Ambari server and agent
      yum:
        name:
          - ambari-server
          - ambari-agent
        state: absent

    - name: Remove existing Ambari repo files
      file:
        path: /etc/yum.repos.d/ambari.repo
        state: absent

    - name: Clean all yum cache
      command: yum clean all

    - name: Add new Ambari repo file
      copy:
        dest: /etc/yum.repos.d/ambari.repo
        content: |
          [ambari]
          async = 1
          baseurl = {{ ambari_repo_url }}
          gpgcheck = 0
          name = ambari Version - Ambari-{{ ambari_version }}

    - name: Add ODP repo files
      copy:
        dest: /etc/yum.repos.d/odp.repo
        content: |
          [odp-main]
          name=ODP Main Repository
          baseurl={{ odp_repo_url }}
          gpgcheck=0
          enabled=1

    - name: Install Ambari server and agent on the server node
      yum:
        name:
          - ambari-server
          - ambari-agent
        state: present
      when: inventory_hostname == ambari_server_node

    - name: Install Ambari agent on all other nodes
      yum:
        name: ambari-agent
        state: present
      when: inventory_hostname != ambari_server_node

    - name: Restore Ambari configuration files
      copy:
        src: "{{ backup_dir }}/ambari.properties"
        dest: /etc/ambari-server/conf/ambari.properties
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Restore Ambari password.dat
      copy:
        src: "{{ backup_dir }}/password.dat"
        dest: /etc/ambari-server/conf/password.dat
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Upgrade Ambari server
      shell: /usr/sbin/ambari-server upgrade -s
      when: inventory_hostname == ambari_server_node
      notify: Restart ambari-server

    - name: Start Ambari server on the server node
      systemd:
        name: ambari-server
        state: started
      when: inventory_hostname == ambari_server_node

    - name: Start Ambari agent on all nodes
      systemd:
        name: ambari-agent
        state: started

  handlers:
    - name: Restart Ambari server
      systemd:
        name: ambari-server
        state: restarted
      when: inventory_hostname == ambari_server_node

    - name: Start Ambari agent on all nodes
      systemd:
        name: ambari-agent
        state: started
      when: inventory_hostname != ambari_server_node

  post_tasks:
    - name: Verify Ambari server status
      systemd:
        name: ambari-server
        state: started
      when: inventory_hostname == ambari_server_node

    - name: Verify Ambari agent status on all nodes
      systemd:
        name: ambari-agent
        state: started
