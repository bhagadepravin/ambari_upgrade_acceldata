---
- name: Upgrade Ambari and ODP
  hosts: all
  become: yes
  vars:
    ambari_version: "2.7.8.0-1"
    odp_version: "3.2.3.0-2"
    ambari_repo_url: "http://10.90.9.51/AMBARI-2.7.8.0-1/"
    odp_repo_url: "http://10.90.9.51/ODP-3.2.3.0-2/3.2.3.0-2/"
    backup_dir: "/etc/ambari-server/conf_backup"
    databases: ["ambari", "hive", "ranger", "rangerkms", "oozie"]
    openjdk_path: "/usr/lib/jvm/java-1.8.0-openjdk"
    java: "openjdk"
    kdc_admin_user: "admin/admin"
    kdc_admin_password: "Acceldata@01"
    ambari_admin_user: "admin"
    ambari_admin_password: "admin"
    vdf_file_path: "/root/ambari_upgrade_acceldata/odp_3.2.3.0-2_vdf.xml"
    
  pre_tasks:
    - name: Retrieve Ambari server node from inventory
      set_fact:
        ambari_server_node: "{{ groups['ambari_server'][0] }}"
        
    - name: Determine the operating system
      ansible.builtin.setup:
        gather_subset:
          - 'distribution'
          - 'distribution_version'

    - name: Set ansible_python_interpreter to Python 3 on RHEL 8
      ansible.builtin.set_fact:
        ansible_python_interpreter: /usr/bin/python3
      when: ansible_facts['distribution'] == 'RedHat' and ansible_facts['distribution_version'].split('.')[0] == '8'

    - name: Install jq
      yum:
        name: jq
        state: present
        
    - name: Update resolv.conf
      lineinfile:
        path: /etc/resolv.conf
        regexp: '^nameserver\s+(?!8\.8\.8\.8)\S+'  # Matches any nameserver entry not equal to 8.8.8.8
        state: absent  # Removes the line if found
      become: yes

    - name: Add nameserver 8.8.8.8
      lineinfile:
        path: /etc/resolv.conf
        line: 'nameserver 8.8.8.8'
      become: yes
      
    - name: Verify Ambari version
      command: ambari-server --version
      register: verify_ambari_version_result
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
 
    - name: Display current Ambari version
      debug:
        msg: "Ambari version output: {{ verify_ambari_version_result.stdout_lines }}"
      when: inventory_hostname == ambari_server_node
    
    - name: Exit playbook if Ambari version is same, update ambari_version.
      fail:
        msg: "Ambari and ODP upgrade failed."
      when: verify_ambari_version_result.stdout_lines is defined 
            and verify_ambari_version_result.stdout_lines | length > 0 
            and verify_ambari_version_result.stdout_lines[0] == ambari_version
            and inventory_hostname == ambari_server_node

    - name: Get Ambari cluster name
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters | jq -r '.items[0].Clusters.cluster_name'"
      register: cluster_name
      when: inventory_hostname == ambari_server_node

    - name: Set cluster name fact
      set_fact:
        cluster_name: "{{ cluster_name.stdout }}"
      when: inventory_hostname == ambari_server_node

    - name: Display cluster name
      debug:
        msg: "Cluster name: {{ cluster_name }}"
      when: inventory_hostname in groups['ambari_server']

    - name: Check if Kerberos is enabled using curl
      command: "curl -u admin:admin -X GET http://{{ ambari_server_node }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS"
      register: kerberos_status
      ignore_errors: true
      when: inventory_hostname == ambari_server_node

    - name: Check Kerberos status
      set_fact:
        kerberos_enabled: "{{ kerberos_status is succeeded }}"
      when: inventory_hostname == ambari_server_node

    - name: Add KDC credentials to Ambari
      uri:
        method: POST
        url: "http://{{ ambari_server_node }}:8080/api/v1/clusters/{{ cluster_name }}/credentials/kdc.admin.credential"
        url_username: "{{ ambari_admin_user }}"
        force_basic_auth: yes
        url_password: "{{ ambari_admin_password }}"
        body: "{ \"Credential\" : { \"principal\" : \"{{ kdc_admin_user }}\", \"key\" : \"{{ kdc_admin_password }}\", \"type\" : \"temporary\" } }"
        body_format: json
        status_code: 201
        headers:
          'X-Requested-By': 'ambari'
        return_content: yes
      register: api_result
      ignore_errors: true
      when: kerberos_enabled | default(false) and inventory_hostname == ambari_server_node
      
    - name: Check if SPARK3 service is present
      command: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3"
      register: spark3_service
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
    
    - name: Get Spark3 mpack name
      shell: grep -w "spark3" /var/lib/ambari-server/resources/mpacks/*/mpack.json | egrep -v "common|addon" | cut -d '"' -f 4
      register: spark3_mpack
      changed_when: false
      check_mode: no
      ignore_errors: yes
      when: spark3_service.stdout | default("") | length > 0 and inventory_hostname in groups['ambari_server']
    
    - name: Find nodes with Spark3 service installed
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X GET http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3/components/    SPARK3_SERVER | jq -r '.host_components[].HostRoles.host_name'"
      register: spark3_nodes
      when: spark3_service.stdout | default("") | length > 0 and inventory_hostname in groups['ambari_server']
    
    - name: Display Spark3 nodes
      debug:
        msg: "Spark3 is installed on: {{ spark3_nodes.stdout_lines }}"
      when: spark3_service.stdout | default("") | length > 0 and inventory_hostname in groups['ambari_server']
    - name: Uninstall Spark3 mpack if present
      shell: ambari-server uninstall-mpack --mpack-name="{{ spark3_mpack.stdout }}"
      when: spark3_mpack.stdout | default("") | length > 0 
      
    - name: Stop Ambari server on the server node
      systemd:
        name: ambari-server
        state: stopped
      when: inventory_hostname == ambari_server_node

    - name: Stop Ambari agent on all nodes
      systemd:
        name: ambari-agent
        state: stopped

    - name: Create backup directory for Ambari configuration
      file:
        path: "{{ backup_dir }}"
        state: directory
      when: inventory_hostname == ambari_server_node

    - name: Backup Ambari server configuration
      copy:
        src: /etc/ambari-server/conf/
        dest: "{{ backup_dir }}"
        remote_src: yes
        mode: preserve
      when: inventory_hostname == ambari_server_node

    - name: Install python3-PyMySQL module
      ansible.builtin.package:
        name: python3-PyMySQL
        state: present
      when: ansible_facts['distribution'] == 'RedHat' and ansible_facts['distribution_version'].split('.')[0] == '8'

    - name: Backup Ambari databases
      mysql_db:
        state: dump
        name: "{{ item }}"
        target: "{{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node
      
    - name: Verify database backups
      stat:
        path: "{{ backup_dir }}/{{ item }}_backup.sql"
      with_items: "{{ databases }}"
      register: backup_files
      when: inventory_hostname == ambari_server_node
      ignore_errors: yes

    - name: Start Ambari Server
      systemd:
        name: ambari-server
        state: started
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0
    
    - name: Stop SPARK3 service
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X PUT -d '{\"ServiceInfo\": {\"state\" : \"INSTALLED\"}}' http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0
    
    - name: Delete SPARK3 service
      shell: "curl -u admin:admin -H 'X-Requested-By: ambari' -X DELETE http://{{ inventory_hostname }}:8080/api/v1/clusters/{{ cluster_name }}/services/SPARK3"
      ignore_errors: true
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0

    - name: Stop Ambari Server
      systemd:
        name: ambari-server
        state: stopped
      when: inventory_hostname == ambari_server_node and spark3_service.stdout | default("") | length > 0
      
  tasks:
    - name: Erase Ambari server and agent
      yum:
        name:
          - ambari-server
          - ambari-agent
        state: absent
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Check if Ambari agent is uninstalled
      command: rpm -q ambari-agent
      register: ambari_agent_installed
      failed_when: ambari_agent_installed.rc == 0
      changed_when: false
      ignore_errors: true
      when: inventory_hostname in groups['ambari_agents']

    - name: Verify Ambari agent is uninstalled
      fail:
        msg: "Ambari agent is still installed on one or more nodes"
      when: ambari_agent_installed.rc == 0
      
    - name: Remove existing Ambari repo files
      file:
        path: /etc/yum.repos.d/ambari.repo
        state: absent
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Clean all yum cache
      command: yum clean all
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Add new Ambari repo file
      copy:
        dest: /etc/yum.repos.d/ambari.repo
        content: |
          [ambari]
          async = 1
          baseurl = {{ ambari_repo_url }}
          gpgcheck = 0
          name = ambari Version - Ambari-{{ ambari_version }}
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Add ODP repo files
      copy:
        dest: /etc/yum.repos.d/odp.repo
        content: |
          [odp-main]
          name=ODP Main Repository
          baseurl={{ odp_repo_url }}
          gpgcheck=0
          enabled=1
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Install Ambari server and agent on the server node
      yum:
        name: ambari-server
        state: present
      async: 3600  # Set a timeout value, here 3600 seconds (1 hour)
      poll: 5  # Poll for task status every 5 seconds
      register: install_result
      when: inventory_hostname == ambari_server_node
    
    - name: Wait for package installation to complete
      async_status:
        jid: "{{ install_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 60  # Retry 60 times (5 minutes) with 5-second interval
      delay: 5  # Wait 5 seconds between retries
      when: install_result is defined
    
    - name: Display package installation result
      debug:
        msg: "Package installation result: {{ job_result }}"
      when: install_result is defined

    - name: Install Ambari agent on all other nodes
      yum:
        name: ambari-agent
        state: present
      when: inventory_hostname in groups['ambari_agents']
      
    - name: Restore Ambari configuration files
      copy:
        src: "{{ backup_dir }}/ambari.properties"
        dest: /etc/ambari-server/conf/ambari.properties
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Restore Ambari password.dat
      copy:
        src: "{{ backup_dir }}/password.dat"
        dest: /etc/ambari-server/conf/password.dat
        remote_src: yes
      when: inventory_hostname == ambari_server_node

    - name: Stop Ambari server on the server node
      systemd:
        name: ambari-server
        state: stopped
      when: inventory_hostname == ambari_server_node
      
    - name: Upgrade Ambari server
      shell: /usr/sbin/ambari-server upgrade -s
      when: inventory_hostname == ambari_server_node

    - name: Restart ambari-server
      service:
        name: ambari-server
        state: restarted
      when: inventory_hostname == ambari_server_node

    - name: Install the Spark3 Management Pack
      shell: "echo yes | ambari-server install-mpack --mpack=https://mirror.odp.acceldata.dev/mpacks/ambari-mpacks-spark3-3.2.2.tar.gz"
      ignore_errors: true
      when: inventory_hostname in groups['ambari_server']

    - name: Modify symbolic links for Spark3
      shell: |
        rm -rf /var/lib/ambari-server/resources/stacks/ODP/3.0/services/SPARK3
        ln -s /var/lib/ambari-server/resources/mpacks/spark3-ambari-3.2.2.mpack-3.2.2/common-services/SPARK3/3.2.2 /var/lib/ambari-server/resources/stacks/ODP/3.0/services/SPARK3
        rm -rf /var/lib/ambari-server/resources/stacks/ODP/3.1/services/SPARK3
        ln -s /var/lib/ambari-server/resources/mpacks/spark3-ambari-3.2.2.mpack-3.2.2/common-services/SPARK3/3.2.2 /var/lib/ambari-server/resources/stacks/ODP/3.1/services/SPARK3
      ignore_errors: true
      when: spark3_service.stdout | default("") | length > 0 and inventory_hostname == ambari_server_node
      
    - name: Wait for Ambari Server to start listening on port 8080
      wait_for:
        port: 8080
        host: 0.0.0.0
        delay: 1
      when: inventory_hostname == ambari_server_node

    - name: Restart ambari-agent
      service:
        name: ambari-agent
        state: restarted
      when: inventory_hostname in groups['ambari_agents']

  tasks:
    - name: Check if current host is Ambari server
      block:
        - name: Get Ambari server facts
          setup:
            filter: "ansible_hostname"
          register: ambari_server_facts

        - debug:
            var: ambari_server_facts

        - set_fact:
            is_ambari_server: "{{ ansible_hostname == ambari_server_facts.ansible_hostname }}"

      when: ansible_hostname in groups['ambari_server']

    - name: Attempt to get an existing VDF for the required version (Ambari >= 2.6)
      uri:
        url: "http://{{ ansible_fqdn }}:8080/api/v1/version_definitions?VersionDefinition/release/version={{ odp_version }}"
        method: GET
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        status_code: 200,201,202
        return_content: yes
      register: existing_vdf
      ignore_errors: true
      when: is_ambari_server | default(false)

    - name: Register the VDF with Ambari
      uri:
        url: http://{{ ansible_fqdn }}:8080/api/v1/version_definitions
        method: POST
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        body: " {\"VersionDefinition\":{ \"version_url\":\"file://{{ vdf_file_path }}\"}}"
        body_format: raw
        status_code: 200,201,202
        return_content: no
      when: existing_vdf is defined and 'items' not in existing_vdf and is_ambari_server | default(false)
